# -*- coding: utf-8 -*-
"""PYF_Project_LearnerNotebook_FullCode (3).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OJdp1ShZEwEJavdcJdd2_b752LQs__xB

# Project Python Foundations: FoodHub Data Analysis

**Marks: 60**

### Context

The number of restaurants in New York is increasing day by day. Lots of students and busy professionals rely on those restaurants due to their hectic lifestyles. Online food delivery service is a great option for them. It provides them with good food from their favorite restaurants. A food aggregator company FoodHub offers access to multiple restaurants through a single smartphone app.

The app allows the restaurants to receive a direct online order from a customer. The app assigns a delivery person from the company to pick up the order after it is confirmed by the restaurant. The delivery person then uses the map to reach the restaurant and waits for the food package. Once the food package is handed over to the delivery person, he/she confirms the pick-up in the app and travels to the customer's location to deliver the food. The delivery person confirms the drop-off in the app after delivering the food package to the customer. The customer can rate the order in the app. The food aggregator earns money by collecting a fixed margin of the delivery order from the restaurants.

### Objective

The food aggregator company has stored the data of the different orders made by the registered customers in their online portal. They want to analyze the data to get a fair idea about the demand of different restaurants which will help them in enhancing their customer experience. Suppose you are hired as a Data Scientist in this company and the Data Science team has shared some of the key questions that need to be answered. Perform the data analysis to find answers to these questions that will help the company to improve the business.

### Data Description

The data contains the different data related to a food order. The detailed data dictionary is given below.

### Data Dictionary

* order_id: Unique ID of the order
* customer_id: ID of the customer who ordered the food
* restaurant_name: Name of the restaurant
* cuisine_type: Cuisine ordered by the customer
* cost: Cost of the order
* day_of_the_week: Indicates whether the order is placed on a weekday or weekend (The weekday is from Monday to Friday and the weekend is Saturday and Sunday)
* rating: Rating given by the customer out of 5
* food_preparation_time: Time (in minutes) taken by the restaurant to prepare the food. This is calculated by taking the difference between the timestamps of the restaurant's order confirmation and the delivery person's pick-up confirmation.
* delivery_time: Time (in minutes) taken by the delivery person to deliver the food package. This is calculated by taking the difference between the timestamps of the delivery person's pick-up confirmation and drop-off information

### Let us start by importing the required libraries
"""

# import libraries for data manipulation
import numpy as np
import pandas as pd

# import libraries for data visualization
import matplotlib.pyplot as plt
import seaborn as sns

# to restrict the float value to 3 decimal places
pd.set_option('display.float_format', lambda x: '%.3f' % x)

"""### Understanding the structure of the data"""

# Commented out IPython magic to ensure Python compatibility.
# uncomment and run the following lines for Google Colab
from google.colab import drive
drive.mount('/content/drive')

# %cd /content/drive/My Drive/Colab Notebooks/

# read the data
df = pd.read_csv("foodhub_order.csv")
# returns the first 5 rows
df.head()

"""#### Observations:

The DataFrame has 9 columns as mentioned in the Data Dictionary. Data in each row corresponds to the order placed by a customer.

### **Question 1:** How many rows and columns are present in the data? [0.5 mark]
"""

print("There are", df.shape[0], 'rows and', df.shape[1], "columns.")

"""### **Question 2:** What are the datatypes of the different columns in the dataset? (The info() function can be used) [0.5 mark]"""

# Use info() to print a concise summary of the DataFrame
df.info()

"""#### Observations:
There are 5 numerical columns in the data and 4 object type columns.

### **Question 3:** Are there any missing values in the data? If yes, treat them using an appropriate method. [1 mark]
"""

df.isnull().sum()

"""#### Observations:
There are no missing values.

### **Question 4:** Check the statistical summary of the data. What is the minimum, average, and maximum time it takes for food to be prepared once an order is placed? [2 marks]
"""

df.describe().T

"""#### Observations:
. cost_of_the_order: The average cost of the oder is 16.5 dollars,
 with standard deviation 7.5 dollars.
The maximum price is 35.4 while the lest price is 4.5 dollars.

. food_preparation_time: The average time it takes for food to be prepared is 27.37 min with minimum is 20 min and maximum is 35 min.

.delivery_time: The mean of delivery time is 24.16 min with minimum 15 min and maximum 33 min.

### **Question 5:** How many orders are not rated? [1 mark]
"""

df['rating'].value_counts()

"""#### Observations:
There are 736 orders not rated.

### Exploratory Data Analysis (EDA)

### Univariate Analysis

### **Question 6:** Explore all the variables and provide observations on their distributions. (Generally, histograms, boxplots, countplots, etc. are used for univariate exploration.) [9 marks]

#### Cost of the order
"""

#Let's check the distribution for numerical columns.
#cost of the order
sns.histplot(data=df,x='cost_of_the_order',kde=True)
plt.title("Histogram: Cost of the order")
plt.xlabel("Cost of the order")
plt.ylabel("Frequency")
plt.show()
sns.boxplot(data=df,x='cost_of_the_order')
plt.show()

""". From The histogram and the box plot the distribution of the cost is skewed to the right with no outliers.

####Food preparation time
"""

# food preparation time
sns.histplot(data=df,x='food_preparation_time',color='purple')
plt.title("Histogram: food preparation time")
plt.xlabel("food preparation time")
plt.ylabel("Frequency")
plt.show()
sns.boxplot(data=df,x='food_preparation_time',color='purple')
plt.show()

""". From the graphs we can conclude that the distribution of the food preparation time is symmetric with 50% of the data between 23 min to 31 min

####Delivery time
"""

# Delivery Time
sns.displot(data=df,x='delivery_time',kind='kde',color='green')
sns.set_style("whitegrid")
plt.show()
sns.boxplot(data=df,x='delivery_time',color='green')
plt.title('Boxplot: Delivery time')
plt.xlabel("Deliver time in minutes")
plt.show()

"""The distribution of the delivery time is slightly skewed to the left with no outlers.

####Number of customers and Number of orders
"""

#Let check the number of customers and the number of orders
customer = df['customer_id'].nunique()
order = df['order_id'].nunique()
print("The number of customers is", customer, "while the number of orders is", order)

"""####Resturant name, Cuisine type, Day of the week, and Rating"""

# Making a list of all categorical variables
cat_cols =  ['restaurant_name', 'cuisine_type', 'day_of_the_week', 'rating']

# Printing the count of unique categorical levels in each column
for column in cat_cols:
    print(df[column].value_counts())
    print(df[column].nunique())
    print("-" * 50)

""".There are about 178 resturants from 14 different cuisine.

.There are about 1351 orders in the weekend and 547 in the weekday.

.The rating of the orders from 3 to 5.

####Cuisine type
"""

#cusine type
sns.countplot(data=df,x='cuisine_type')
plt.title("Bar Plot: frequency of cuisine")
plt.xticks(rotation =90)
plt.show()

""". There are about 14 different cuisine.

.The most popular is the American cuisine with more than 550 orders then the Japanese cuisine with about 500 orders.

.The least common cusine are the Vetnamese and the Korean with less than 10 orders.

####Day of the week
"""

sns.countplot(data=df,x='day_of_the_week',palette='brg')
plt.show()

"""The orders during the weekend are more than double the orders during the weekdays

####Rating of orders
"""

sns.countplot(data=df,x='rating',palette='terrain')
plt.title("Rating of Orders")
plt.show()

""".More than 700 orders did not get any rating.

. About 600 orders are rated 5.

.Rate 4 are given for 400 orders.

.The lest rate was 3 for about 200 orders.

### **Question 7**: Which are the top 5 restaurants in terms of the number of orders received? [1 mark]
"""

sns.countplot(data=df,x='restaurant_name',order=pd.value_counts(df['restaurant_name']).iloc[:5].index)
plt.title("The top 5 restaurants in terms of the number of orders received")
plt.xticks(rotation=90)
plt.show()

"""#### Observations:
The top 5 restaurants in terms of the number of orders received:
1. Shake Shaack.
2. The Meatball Shop.
3. Blue Ribon Sushi.
4. Blue Ribon Fried Chicken.
5. Parm

### **Question 8**: Which is the most popular cuisine on weekends? [1 mark]
"""

sns.countplot(data=df,x='cuisine_type',hue='day_of_the_week',palette="PuRd")
plt.title("Frequency of cuisine during the week")
plt.xticks(rotation =90)
plt.show()

"""#### Observations:
The most popular cuisine on weekends is American cuisine.

### **Question 9**: What percentage of the orders cost more than 20 dollars? [2 marks]
"""

cost = df[df['cost_of_the_order'] > 20]
prcentage = (cost.shape[0]/df.shape[0])*100
print("The percentage of the orders cost more than 20 dollars:",'%.2f'%prcentage,"%")

"""#### Observations:
The percentage of the orders cost more than 20 dollars: 29.24 %

### **Question 10**: What is the mean order delivery time? [1 mark]
"""

df['delivery_time'].mean()

"""#### Observations:
The mean order delivery time is 24.16 min

### **Question 11:** The company has decided to give 20% discount vouchers to the top 3 most frequent customers. Find the IDs of these customers and the number of orders they placed. [1 mark]
"""

df['customer_id'].value_counts()

"""#### Observations:
The top 3 most frequent customers who will get 20% discount vouchers from the company:
52832,  47440,  83287

### Multivariate Analysis

### **Question 12**: Perform a multivariate analysis to explore relationships between the important variables in the dataset. (It is a good idea to explore relations between numerical variables as well as relations between numerical and categorical variables) [10 marks]

#### The correlation coefficient between variables
"""

#plot the heatmap
plt.figure(figsize=(10,5))
sns.heatmap(df.corr(),annot=True,cmap='Spectral',vmin=-1,vmax=1)
plt.show();

""".Since all the cells with yellow color that means all the correlation cofficients are around 0 which indicate weak relationship.

.There is a weak negative relation between cost of the order and the delivery time, and weak positive relation between cost of the order and the food preparation time.

.There is a weak positive relation between the food preparation time and the delivary time.

.We should not consider the correlation value with custome id and order id because this columns are  unique identifier for customer and order.

####Total time(food preparation time + delivery time)
"""

# let's create a column total time with a sum of food preparation time, and delivery time
df['total_time'] = df['food_preparation_time'] + df['delivery_time']
df.head()

"""####Total time and Cost of the order"""

# Lets check the relationship betwee the total time and the cost of the order
plt.figure(figsize=(10,5))
plt.title("Scatter plot of total time and cost of the orders")
sns.scatterplot(data=df,x='total_time',y='cost_of_the_order')
plt.show()

df[["total_time",'cost_of_the_order']].corr()

""".From the scatter plt and the correlatio coeficient which equaI to 0.006, it  seems there is no relation between the total time (the food has to prepare and the deliver time) and the cost of the orders.

####Rating and Cost of the order
"""

sns.boxplot(data=df,x='rating',y='cost_of_the_order',palette='coolwarm')
plt.show()

""".There are no significant difference between the cost of the orders in the rating levels. The median of the cost of the order is around 15 dollars. The minimum cost in the four levels is 5 dollars and the maximum are around to 35 dollars

####Rating and total time
"""

sns.boxplot(data=df,x='rating',y='total_time',palette='ocean')
plt.show()

"""There are no significant difference between the total time in the rating levels. The median of the cost of the order is around 50 min.There is a slightly minumim outlier in rating 3.

####Cuisine type and Rating
"""

sns.countplot(data=df,x='cuisine_type',hue='rating')
plt.xticks(rotation =90)
plt.show()

""".The top highest rating cuisine are American, Japanese, and Italian.

.The least rating cuisine are Vetnamese.

.About 200 orders did not get rating in the American and the Japanese cuisine.

####Cuisine type and cost of the order
"""

sns.boxplot(data=df,x='cuisine_type',y='cost_of_the_order')
plt.xticks(rotation=90)
plt.show()

""". The minimum cost of the most cuisine around 5 dollars except French, Spanish and Korean cuisine.

.There are lower and upper outliers in the korean cuisine.

.The cost of the American and the Italian cuisine arounds 5 dollars to less than 35 dollars with median 14 dollars.

. The cost of the Mediteranean cuisine is between 5 to 25 dollars with maximum outlier reach 35 dollars

.The median cost of the Vietnamese cuisine is about 12 dollars with 23 dollars as an outlier.

####Cuisine type and food preparation time
"""

sns.boxplot(data=df,x='cuisine_type',y='food_preparation_time')
plt.xticks(rotation=90)
plt.show()

""".The minumum time to prepare food in each cusine is 20min except for Thai and French cuisine the minimum time is about 21.

.The maximum time to prepare food in each cusine is about 35min except Thai and Vietnamese cusine are slightly lower.

.The Korean cuisine has the lowest prepare time which range from 20 min to 29min with some outlier reach thirties.

####Number of resturant in each cuisine
"""

#count the number of resturants in each cuisine
count = df.groupby(['cuisine_type','restaurant_name']).size().reset_index().groupby('cuisine_type').size()
count

"""###### Obeservation
.The American cuisine has the largest number of resturants which is 41 resturants then the Italian with 31 resturant and The Japanese with 29 resturants.The Chines cuisine with 16 resturants.

####Day of the week and Cost of the order
"""

sns.boxplot(data=df,x='day_of_the_week',y='cost_of_the_order')
plt.show()

""". There is no significant difference between the cost of the order during the weedays or the weekend. Both have about 14 dollars median with q1 equal to 5 and q3 equal to 23 dollars.

####Day of the week and Delivery time
"""

sns.boxplot(data=df,x='day_of_the_week',y='delivery_time')
plt.show()

""". The median of delivery time during the weekends is 22min with minimum 15 min and maximum 30 min.

.The median of delivery time during the weekdays is 27.5min with minimum 24min and maximum 33min.

### **Question 13:** The company wants to provide a promotional offer in the advertisement of the restaurants. The condition to get the offer is that the restaurants must have a rating count of more than 50 and the average rating should be greater than 4. Find the restaurants fulfilling the criteria to get the promotional offer. [3 marks]
"""

# changing the data type to int
df['rating'] = df['rating'].replace('Not given',0)
df['rating'] = df['rating'].astype(int)

df.head()

#Filter the restaurant's column for those restaurants that do not have a rating as 'Not given'
offer = df[['restaurant_name','rating']]
offer = offer.loc[offer['rating'] > 0]
offer = offer.reset_index(drop=True)
offer

#Create a dataframe that contains the restaurant names with their rating counts
discount = offer['restaurant_name'].value_counts()
discount = discount.reset_index()
discount.rename(columns ={"index": "restaurant_name", "restaurant_name": "count"},inplace = True)
discount

#Get all the restaurant names that have a rating count of more than 50 with their rating
discount = pd.merge(discount,offer,how='inner')
discount

#find the mean rating of the restaurants by using the groupby function
discount = discount[(discount["count"] > 50)]
discount.groupby(discount['restaurant_name']).rating.mean()

"""#### Observations:
The restaurants fulfilling the criteria to get the promotional offer are:

Blue Ribbon Fried Chicken   4.328

Blue Ribbon Sushi           4.219

Shake Shack                 4.278

The Meatball Shop           4.512

### **Question 14:** The company charges the restaurant 25% on the orders having cost greater than 20 dollars and 15% on the orders having cost greater than 5 dollars. Find the net revenue generated by the company across all orders. [3 marks]
"""

#calculate the revenue of the orders according to the coditions
df["revenue"] = 0
df.loc[df['cost_of_the_order'] > 20, "revenue"] = 0.25 * df['cost_of_the_order']
df.loc[df['cost_of_the_order'] > 5,"revenue"] = 0.15 * df['cost_of_the_order']
df.head()

#The sum of the revenue across all orders
df['revenue'].sum()

"""#### Observations:
The net revenue generated by the company across all orders is 4690.8 dollars.

### **Question 15:** The company wants to analyze the total time required to deliver the food. What percentage of orders take more than 60 minutes to get delivered from the time the order is placed? (The food has to be prepared and then delivered.) [2 marks]
"""

#Calculating the precentage of orders take more than 60 min of total time (prepare + deliver)
order = df.loc[df['total_time'] > 60].shape[0]
print("The percentage of orders take more than 60 minutes to get delivered from the time the order is placed",'%.2f'%((order/df.shape[0]*100)),'%')

"""#### Observations:

### **Question 16:** The company wants to analyze the delivery time of the orders on weekdays and weekends. How does the mean delivery time vary during weekdays and weekends? [2 marks]
"""

df.groupby(df["day_of_the_week"]).delivery_time.mean()

"""#### Observations:
.The mean delivery time during weekdays is 28.34 min and 22.47 min in weekends

### Conclusion and Recommendations

### **Question 17:** What are your conclusions from the analysis? What recommendations would you like to share to help improve the business? (You can use cuisine type and feedback ratings to drive your business recommendations.) [6 marks]

### Conclusions:
*  There are 1898 orders made by 1200 registered customers.
* The rating of the orders is between 3 to 5 with 736 not given.
* The average cost of the oder is 16.5 dollars, with standard deviation 7.5 dollars. The maximum price is 35.4 while the lest price is 4.5 dollars.
* The average time it takes for food to be prepared is 27.37 min with minimum  20 min and maximum 35 min.
* The mean of delivery time is 24.16 min with minimum 15 min and maximum 33 min.
* There are about 178 resturants from 14 different cuisine.
* The most popular is the American cuisine with more than 550 orders then the Japanese cuisine with about 500 orders.
* The least common cusine are the Vetnamese and the Korean with less than 10 orders.
* The top 5 restaurants in terms of the number of orders received:
   1. Shake Shaack.
   2. The Meatball Shop.
   3. Blue Ribon Sushi.
   4. Blue Ribon Fried Chicken.
   5. Parm.
* The American cuisine has the largest number of resturants which is 41 resturants then the Italian with 31 resturant and the Japanese with 29 resturants.While, the Chines cuisine woth 16 resturants.   
* The Vietnamese cuisine has the lowes number of resturant which is only 3 resturants.
* There are about 1351 orders in the weekend and 547 in the weekday.
* The cost of the orders does not affect the rating.
* The total time of the orders(prepare food + delivery) does not affect the rating levels
* The minimum cost of the most cuisine around 5 dollars except French, Spanish and Korean cuisine.
* The cost of the American and the Italian cuisine arounds 5 dollars to less than 35 dollars with median 14 dollars.
* The median cost of the Vietnamese cuisine is about 12 dollars with 23 dollars as an outlier.
* There is no significant difference in the time need to prepare food between the diference cuisine except the Korean cuisine has the smallest rane of time.
* The median of delivery time during the weekends is 22min with minimum 15 min and maximum 30 min.
* The median of delivery time during the weekdays is 27.5min with minimum 24min and maximum 33min.
* The mean delivery time during weekdays is 28.34 min and 22.47 min in weekends

### Recommendations:

* The app should find a way to decrease the not given rate of the orders.
* The top popular cuisines have the largets numbers of resturants in the app, We recommed to increase the number of resturants options in the less popular cuisines such as the Vietnamese cuisine.
* There company may need to improve the delivary time during the weekdays.
* The company need to encourage the customers to try the least common cusine such as the Vetnamese and the Korean.

---
"""